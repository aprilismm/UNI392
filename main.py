# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17v5XDzbxPg1igRpPibY-OaC6KUPXOLri
"""

from machine import Pin
from network import WLAN, STA_IF
import utime
import requests
import dht

UBIDOTS_API_KEY = "BBUS-8SJzjhAMrwcF1bWXASsP9o9UuyjY9M"
MACHINE_ID = "esp32-uni436"
UBIDOTS_URL = f"http://industrial.api.ubidots.com/api/v1.6/devices/{MACHINE_ID}"
SSID = "Wokwi-GUEST"
PASSWORD = ""

SENSOR_LABELS = ["dht_sensor", "motion_sensor"]

# Pin assignments
dht_pin = Pin(4, Pin.IN)
pir_sensor_pin = Pin(15, Pin.IN)

# Set up WLAN
wlan = WLAN(STA_IF)
wlan.active(True)
wlan.connect(SSID, PASSWORD)

def get_timestamp():
    year, month, day = utime.localtime()[0:3]
    hour, minute, second = utime.localtime()[3:6]
    return f"{year:04d}-{month:02d}-{day:02d}T{hour:02d}:{minute:02d}:{second:02d}Z"

def create_payload(data):
    return {
        "temperature_celsius": data["dht_sensor"]["temp_c"],
        "temperature_fahrenheit": data["dht_sensor"]["temp_f"],
        "humidity": data["dht_sensor"]["hum"],
        "motion_status": data["motion_sensor"]
    }

def send_to_ubidots(payload):
    try:
        attempts = 0
        status = 400
        headers = {"X-Auth-Token": UBIDOTS_API_KEY, "Content-Type": "application/json"}

        while status >= 400 and attempts < 5:
            try:
                response = requests.post(url=UBIDOTS_URL, headers=headers, json=payload)
                status = response.status_code
                print(f"[INFO] Attempt {attempts + 1}: Status {status}")

                if status < 400:
                    print("[INFO] Request successful")
                    print(response.json())
                    return True
            except OSError as e:
                print(f"[ERROR] Network error: {e}")
                status = 500

            attempts += 1
            backoff_time = 2 ** attempts
            print(f"[INFO] Retrying in {backoff_time} seconds...")
            utime.sleep(backoff_time)

        print("[ERROR] Failed after 5 attempts")
        return False

    except Exception as e:
        print(f"[ERROR] Unexpected error: {e}")
        return False

def send_data_to_rest_api(data):
    try:
        dht_url = "http://localhost:8000/dht"
        motion_url = "http://localhost:8000/hcsr"

        dht_data = {
            "temperature": data["temperature_celsius"],
            "humidity": data["humidity"],
            "timestamp": get_timestamp(),
        }

        motion_data = {
            "motion": data["motion_status"],
            "timestamp": get_timestamp(),
        }

        dht_response = requests.post(dht_url, json=dht_data)
        motion_response = requests.post(motion_url, json={"motion": motion_data})

        if dht_response.status_code == 200 and motion_response.status_code == 200:
            print("[INFO] Data sent successfully to REST API")
            return True
        else:
            print("[ERROR] Failed to send data to REST API")
            return False

    except Exception as e:
        print(f"[ERROR] REST API error: {e}")
        return False

def read_sensors():
    dht_data = read_dht_sensor()
    motion_data = read_motion_sensor()

    return {
        SENSOR_LABELS[0]: dht_data,
        SENSOR_LABELS[1]: motion_data,
    }

def read_dht_sensor():
    sensor = dht.DHT22(dht_pin)
    try:
        sensor.measure()
        temperature = sensor.temperature()
        humidity = sensor.humidity()
        temperature_f = temperature * (9 / 5) + 32.0

        return {
            "temp_c": temperature,
            "temp_f": temperature_f,
            "hum": humidity,
        }
    except OSError as e:
        print("Failed to read DHT sensor.")
        return None

def read_motion_sensor():
    return pir_sensor_pin.value()

while True:
    sensor_data = read_sensors()
    if sensor_data[SENSOR_LABELS[0]] is not None:
        payload = create_payload(sensor_data)
        send_to_ubidots(payload)
        send_data_to_rest_api(payload)

    print(sensor_data)
    utime.sleep(5)